{"version":3,"sources":["config.js","directives.js","dashboard/dashboardcontroller.js","login/authController.js","sidenav/sideNavController.js","topNav/topNavController.js","users/userController.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"adminapp.js","sourcesContent":["(function() {\n\t'use strict';\n\tvar admin = angular.module('adminApp', ['ui.router', 'satellizer','ngResource','ngMaterial','ngAnimate','ngMessages', 'ngStorage','md.data.table','app.directives']);\n\n  admin.config(['$mdThemingProvider', '$httpProvider', '$stateProvider', '$urlRouterProvider', '$authProvider', '$provide', '$locationProvider', function($mdThemingProvider, $httpProvider, $stateProvider, $urlRouterProvider, $authProvider, $provide, $locationProvider) {\n\t\t\t// Satellizer configuration that specifies which API\n\t\t\t// route the JWT should be retrieved from\n\t\t\t$authProvider.loginUrl = '/api/authenticate';\n\t\t\t// Redirect to the auth state if any other states\n\t\t\t// are requested other than users\n\t\t\t$urlRouterProvider.otherwise('/login');\n      $locationProvider.html5Mode(true);\n\t\t\t$stateProvider\n\t\t\t\t.state('login', {\n\t\t\t\t\turl: '/login',\n\t\t\t\t\ttemplateUrl: '../views/admin/login/authView.html',\n\t\t\t\t\tcontroller: 'AuthController as auth',\n\t\t\t\t\ttitle : 'Administration | Login'\n\t\t\t\t})\n\t\t\t\t.state('dashboard', {\n\t\t\t\t\turl: '/dashboard',\n\t\t\t\t\ttemplateUrl: '../views/admin/dashboard/dashboard.html',\n\t\t\t\t\tcontroller: 'DashboardController as dashboard',\n\t\t\t\t\ttitle : 'Administration | Dashboard'\n\t\t\t\t})\n\t\t\t\t.state('users', {\n\t\t\t\t\turl: '/users',\n\t\t\t\t\ttemplateUrl: '../views/admin/users/list-users.html',\n\t\t\t\t\tcontroller: 'UserController as user',\n\t\t\t\t\ttitle : 'Administration | Users'\n\t\t\t\t});\n\n\t\t\t\tfunction redirectWhenLoggedOut($q, $injector) {\n        return {\n            'responseError': function (rejection) {\n                var $state = $injector.get('$state');\n                var rejectionReasons = ['token_not_provided', 'token_expired', 'token_absent', 'token_invalid','could_not_create_token'];\n                angular.forEach(rejectionReasons, function (value, key) {\n                    if (rejection.data.error === value || rejection.status === 401) {\n                        localStorage.removeItem('user');\n                        $state.go('login');\n                    }\n                });\n                return $q.reject(rejection);\n            }\n        }\n    }\n    $provide.factory('unauthorisedInterceptor', redirectWhenLoggedOut);\n    // Push the new factory onto the $http interceptor array\n    $httpProvider.interceptors.push('unauthorisedInterceptor');\n\n\t\t}]);\n  //Update Title and State\n  admin.run([ '$rootScope', '$state', '$stateParams' , '$http',function ($rootScope, $state, $stateParams, $http) {\n      $rootScope.$state = $state;\n      $rootScope.$stateParams = $stateParams;\n      // $stateChangeStart is fired whenever the state changes. We can use some parameters\n      // such as toState to hook into details about the state as it is changing\n      $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {\n\t\t\t\t\tif(toState.name !== \"login\") {\n\t\t\t\t\t\t$http.get('/api/authenticate').error(function(data){});\n\t\t\t\t\t}\n          $rootScope.loading = true;\n          // Grab the user from local storage and parse it to an object\n          var user = JSON.parse(localStorage.getItem('user'));\n          // If there is any user data in local storage then the user is quite\n          // likely authenticated. If their token is expired, or if they are\n          // otherwise not actually authenticated, they will be redirected to\n          // the auth state because of the rejected request anyway\n          if(user) {\n              // The user's authenticated state gets flipped to\n              // true so we can now show parts of the UI that rely\n              // on the user being logged in\n              $rootScope.authenticated = true;\n              // Putting the user's data on $rootScope allows\n              // us to access it anywhere across the app. Here\n              // we are grabbing what is in local storage\n              $rootScope.currentUser = user;\n              // If the user is logged in and we hit the auth route we don't need\n              // to stay there and can send the user to the main state\n              if(toState.name === \"login\") {\n                  // Preventing the default behavior allows us to use $state.go\n                  // to change states\n                  event.preventDefault();\n                  // go to the \"main\" state which in our case is users\n                  $state.go('dashboard');\n              }\n          }\n      });\n      $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {\n        //console.log(\"state change -> From state: \" + fromState.name + \" To state: \" + toState.name);\n        $rootScope.loading = false;\n      });\n  }]);\n\n})();\n","var directivesApp = angular.module('app.directives',[]);\n\ndirectivesApp.directive(\"thekodePreloader\", function(){\n  return{\n    restrict : 'AEC',\n\t\treplace : true,\n    template : '<div flex ng-show=\"loading\" class=\"loading\"><div class=\"spinner\"><div class=\"double-bounce1\"></div><div class=\"double-bounce2\"></div></div></div>'\n  }\n});\n","(function() {\n\n\t'use strict';\n\n\tangular\n\t\t.module('adminApp')\n\t\t.controller('DashboardController', DashboardController);\n\tfunction DashboardController($http) {\n\t\tvar vm = this;\n\t\tvm.users;\n\t\tvm.error;\n\t\tvm.getUsers = function() {\n\t\t\t// This request will hit the index method in the AuthenticateController\n\t\t\t// on the Laravel side and will return the list of users\n\t\t\t$http.get('/api/authenticate').success(function(response) {\n\t\t\t\t\tvm.users = response.users;\n\t\t\t}).error(function(error) {\n\t\t\t\t\tvm.error = error;\n\t\t\t\t\tfunction sendback(){\n\t\t\t\t\t  window.location = 'login';\n\t\t\t\t\t}\n\t\t\t\t\tsetTimeout(sendback, 1000);\n\t\t\t});\n\t\t}\n\t}\n\n})();\n","(function() {\n\n\t'use strict';\n\n\tangular\n\t\t.module('adminApp')\n\t\t.controller('AuthController', AuthController);\n\n\n\tfunction AuthController($auth, $state, $scope, $http, $rootScope) {\n\t\tvar vm = this;\n\t\t$scope.loginError=false;\n    $scope.loginErrorText='';\n\t\tvm.login = function() {\n\t\t\tvar credentials = {\n\t\t\t\temail: vm.email,\n\t\t\t\tpassword: vm.password\n\t\t\t}\n\t\t\t// Use Satellizer's $auth service to login\n\t\t\t$auth.login(credentials).then(function(data) {\n\t\t\t\t// If login is successful, get User Information\n\t\t\t\treturn $http.get('/api/authenticate');\n\t\t\t}, function(error) {\n\t\t\t\t$scope.loginError = true;\n\t\t\t\terror.data.error ? $scope.loginErrorText = error.data.error : $scope.loginErrorText = 'Invalid Credentials';\n\t\t\t}).then(function(response) {\n\t\t\t\t\tif(typeof response != \"undefined\"){\n\t\t\t\t\t\tvar user = JSON.stringify(response.data.user);\n\t\t\t\t\t\tlocalStorage.setItem('user', user);\n\t\t\t\t\t\t$rootScope.authenticated = true;\n\t\t\t\t\t\t$rootScope.currentUser = response.data.user;\n\t\t\t\t\t\t$scope.loginError = false;\n\t\t\t\t\t\t$scope.loginErrorText = '';\n\t\t\t\t\t\t$state.go('dashboard');\n\t\t\t\t\t}\n\t\t\t});;\n\t\t}\n\n\t}\n\n})();\n","(function() {\n\t'use strict';\n\tangular.module('adminApp').controller('sideNavController', sideNavController);\n\n    function sideNavController($auth, $state, $http, $rootScope, $scope, $mdSidenav) {\n      var vm = this;\n      vm.isOpen = isOpen;\n      vm.toggleOpen = toggleOpen;\n      vm.closeMenu = closeMenu;\n\n      function closeMenu() {\n\t\t\t\t$mdSidenav('left').close();\n\t\t\t};\n\n      function isOpen(){\n\n      };\n\n      function toggleOpen(){\n\n      };\n\n    }\n\n})();\n","(function() {\n\t'use strict';\n\tangular.module('adminApp').controller('topNavController', topNavController);\n\n    function topNavController($auth, $state, $http, $rootScope, $scope, $mdSidenav) {\n      var vm = this;\n      vm.logout = function() {\n          $auth.logout().then(function() {\n              // Remove the authenticated user from local storage\n              localStorage.removeItem('user');\n              // Flip authenticated to false so that we no longer\n              // show UI elements dependant on the user being logged in\n              $rootScope.authenticated = false;\n              // Remove the current user info from rootscope\n              $rootScope.currentUser = null;\n              $state.go('login');\n          });\n      }\n\t\t\tvm.openMenu = function() {\n\t\t\t\t$mdSidenav('left').open();\n\t\t\t};\n\t\t\tvm.closeMenu = function() {\n\t\t\t\t$mdSidenav('left').close();\n\t\t\t};\n    }\n\n})();\n","(function() {\n\n\t'use strict';\n\n\tangular\n\t\t.module('adminApp')\n\t\t.controller('UserController', UserController);\n\tfunction UserController($http) {\n\t\tvar vm = this;\n\t\tvm.users;\n    $http.get('/api/authenticate').then(function(response) {\n\t\t\t//alert(JSON.stringify(response));\n      vm.users = response.data.users;\n    },function(error){\n      console.log(error);\n    })\n\t}\n\n})();\n"]}