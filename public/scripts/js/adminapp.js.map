{"version":3,"sources":["config.js","directives.js","clients/clientController.js","dashboard/dashboardcontroller.js","login/authController.js","sidenav/sideNavController.js","topNav/topNavController.js","users/userController.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"adminapp.js","sourcesContent":["(function() {\r\n\t'use strict';\r\n\tvar admin = angular.module('adminApp', ['ui.router', 'satellizer','ngResource','ngMaterial','ngAnimate','ngMessages', 'ngStorage','md.data.table','app.directives']);\r\n\r\n  admin.config(['$mdThemingProvider', '$httpProvider', '$stateProvider', '$urlRouterProvider', '$authProvider', '$provide', '$locationProvider', function($mdThemingProvider, $httpProvider, $stateProvider, $urlRouterProvider, $authProvider, $provide, $locationProvider) {\r\n\r\n\t\t\t$mdThemingProvider.theme('default')\r\n\t\t\t\t.primaryPalette('blue', {\r\n\t\t\t\t\t'default': '700',\r\n\t\t\t\t\t'hue-1': '100',\r\n\t\t\t\t\t'hue-2': '600',\r\n\t\t\t\t\t'hue-3': 'A100'\r\n\t\t\t\t})\r\n\t\t\t\t// If you specify less than all of the keys, it will inherit from the\r\n\t\t\t\t// default shades\r\n\t\t\t\t.accentPalette('indigo', {\r\n\t\t\t\t\t'default': '900'\r\n\t\t\t});\r\n\r\n\t\t\t// Satellizer configuration that specifies which API\r\n\t\t\t// route the JWT should be retrieved from\r\n\t\t\t$authProvider.loginUrl = '/api/authenticate';\r\n\t\t\t// Redirect to the auth state if any other states\r\n\t\t\t// are requested other than users\r\n\t\t\t$urlRouterProvider.otherwise('/login');\r\n      $locationProvider.html5Mode(true);\r\n\t\t\t$stateProvider\r\n\t\t\t\t.state('login', {\r\n\t\t\t\t\turl: '/login',\r\n\t\t\t\t\ttemplateUrl: '../views/admin/login/authView.html',\r\n\t\t\t\t\tcontroller: 'AuthController as auth',\r\n\t\t\t\t\ttitle : 'Administration | Login'\r\n\t\t\t\t})\r\n\t\t\t\t.state('dashboard', {\r\n\t\t\t\t\turl: '/dashboard',\r\n\t\t\t\t\ttemplateUrl: '../views/admin/dashboard/dashboard.html',\r\n\t\t\t\t\tcontroller: 'DashboardController as dashboard',\r\n\t\t\t\t\ttitle : 'Administration | Dashboard'\r\n\t\t\t\t})\r\n\t\t\t\t.state('users', {\r\n\t\t\t\t\turl: '/users',\r\n\t\t\t\t\ttemplateUrl: '../views/admin/users/list-users.html',\r\n\t\t\t\t\tcontroller: 'UserController as user',\r\n\t\t\t\t\ttitle : 'Administration | Users'\r\n\t\t\t\t})\r\n\t\t\t\t.state('clientlogins', {\r\n\t\t\t\t\turl: '/clogins',\r\n\t\t\t\t\ttemplateUrl: '../views/admin/clients/client-users.html',\r\n\t\t\t\t\tcontroller: 'ClientLoginsController as client',\r\n\t\t\t\t\ttitle : 'Administration | Client Logins'\r\n\t\t\t\t});\r\n\r\n\t\t\t\tfunction redirectWhenLoggedOut($q, $injector) {\r\n        return {\r\n            'responseError': function (rejection) {\r\n                var $state = $injector.get('$state');\r\n                var rejectionReasons = ['token_not_provided', 'token_expired', 'token_absent', 'token_invalid','could_not_create_token'];\r\n                angular.forEach(rejectionReasons, function (value, key) {\r\n                    if (rejection.data.error === value || rejection.status === 401) {\r\n                        localStorage.removeItem('user');\r\n                        $state.go('login');\r\n                    }\r\n                });\r\n                return $q.reject(rejection);\r\n            }\r\n        }\r\n    }\r\n    $provide.factory('unauthorisedInterceptor', redirectWhenLoggedOut);\r\n    // Push the new factory onto the $http interceptor array\r\n    $httpProvider.interceptors.push('unauthorisedInterceptor');\r\n\r\n\t\t}]);\r\n  //Update Title and State\r\n  admin.run([ '$rootScope', '$state', '$stateParams' , '$http',function ($rootScope, $state, $stateParams, $http) {\r\n      $rootScope.$state = $state;\r\n      $rootScope.$stateParams = $stateParams;\r\n      // $stateChangeStart is fired whenever the state changes. We can use some parameters\r\n      // such as toState to hook into details about the state as it is changing\r\n      $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {\r\n\t\t\t\t\tif(toState.name !== \"login\") {\r\n\t\t\t\t\t\t$http.get('/api/authenticate').error(function(data){});\r\n\t\t\t\t\t}\r\n          $rootScope.loading = true;\r\n          // Grab the user from local storage and parse it to an object\r\n          var user = JSON.parse(localStorage.getItem('user'));\r\n          // If there is any user data in local storage then the user is quite\r\n          // likely authenticated. If their token is expired, or if they are\r\n          // otherwise not actually authenticated, they will be redirected to\r\n          // the auth state because of the rejected request anyway\r\n          if(user) {\r\n              // The user's authenticated state gets flipped to\r\n              // true so we can now show parts of the UI that rely\r\n              // on the user being logged in\r\n              $rootScope.authenticated = true;\r\n              // Putting the user's data on $rootScope allows\r\n              // us to access it anywhere across the app. Here\r\n              // we are grabbing what is in local storage\r\n              $rootScope.currentUser = user;\r\n              // If the user is logged in and we hit the auth route we don't need\r\n              // to stay there and can send the user to the main state\r\n              if(toState.name === \"login\") {\r\n                  // Preventing the default behavior allows us to use $state.go\r\n                  // to change states\r\n                  event.preventDefault();\r\n                  // go to the \"main\" state which in our case is users\r\n                  $state.go('dashboard');\r\n              }\r\n          }\r\n      });\r\n      $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {\r\n        //console.log(\"state change -> From state: \" + fromState.name + \" To state: \" + toState.name);\r\n        $rootScope.loading = false;\r\n      });\r\n  }]);\r\n\r\n})();\r\n","var directivesApp = angular.module('app.directives',[]);\r\n\r\ndirectivesApp.directive(\"thekodePreloader\", function(){\r\n  return{\r\n    restrict : 'AEC',\r\n\t\treplace : true,\r\n    template : '<div flex ng-show=\"loading\" class=\"loading\"><div class=\"spinner\"><div class=\"double-bounce1\"></div><div class=\"double-bounce2\"></div></div></div>'\r\n  }\r\n});\r\n","(function() {\r\n\t'use strict';\r\n\tangular.module('adminApp').controller('ClientLoginsController', ClientLoginsController);\r\n\r\n  function ClientLoginsController() {\r\n\r\n  }\r\n\r\n})();\r\n","(function() {\r\n\r\n\t'use strict';\r\n\r\n\tangular\r\n\t\t.module('adminApp')\r\n\t\t.controller('DashboardController', DashboardController);\r\n\tfunction DashboardController($http) {\r\n\t\tvar vm = this;\r\n\t\tvm.users;\r\n\t\tvm.error;\r\n\t\tvm.getUsers = function() {\r\n\t\t\t// This request will hit the index method in the AuthenticateController\r\n\t\t\t// on the Laravel side and will return the list of users\r\n\t\t\t$http.get('/api/authenticate').success(function(response) {\r\n\t\t\t\t\tvm.users = response.users;\r\n\t\t\t}).error(function(error) {\r\n\t\t\t\t\tvm.error = error;\r\n\t\t\t\t\tfunction sendback(){\r\n\t\t\t\t\t  window.location = 'login';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsetTimeout(sendback, 1000);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n})();\r\n","(function() {\r\n\r\n\t'use strict';\r\n\r\n\tangular\r\n\t\t.module('adminApp')\r\n\t\t.controller('AuthController', AuthController);\r\n\r\n\r\n\tfunction AuthController($auth, $state, $scope, $http, $rootScope) {\r\n\t\tvar vm = this;\r\n\t\t$scope.loginError=false;\r\n    $scope.loginErrorText='';\r\n\t\tvm.login = function() {\r\n\t\t\tvar credentials = {\r\n\t\t\t\temail: vm.email,\r\n\t\t\t\tpassword: vm.password\r\n\t\t\t}\r\n\t\t\t// Use Satellizer's $auth service to login\r\n\t\t\t$auth.login(credentials).then(function(data) {\r\n\t\t\t\t// If login is successful, get User Information\r\n\t\t\t\treturn $http.get('/api/authenticate');\r\n\t\t\t}, function(error) {\r\n\t\t\t\t$scope.loginError = true;\r\n\t\t\t\terror.data.error ? $scope.loginErrorText = error.data.error : $scope.loginErrorText = 'Invalid Credentials';\r\n\t\t\t}).then(function(response) {\r\n\t\t\t\t\tif(typeof response != \"undefined\"){\r\n\t\t\t\t\t\tvar user = JSON.stringify(response.data.user);\r\n\t\t\t\t\t\tlocalStorage.setItem('user', user);\r\n\t\t\t\t\t\t$rootScope.authenticated = true;\r\n\t\t\t\t\t\t$rootScope.currentUser = response.data.user;\r\n\t\t\t\t\t\t$scope.loginError = false;\r\n\t\t\t\t\t\t$scope.loginErrorText = '';\r\n\t\t\t\t\t\t$state.go('dashboard');\r\n\t\t\t\t\t}\r\n\t\t\t});;\r\n\t\t}\r\n\r\n\t}\r\n\r\n})();\r\n","(function() {\r\n\t'use strict';\r\n\tangular.module('adminApp').controller('sideNavController', sideNavController);\r\n\r\n    function sideNavController($auth, $state, $http, $rootScope, $scope, $mdSidenav) {\r\n      var vm = this;\r\n      vm.isOpen = isOpen;\r\n      vm.toggleOpen = toggleOpen;\r\n      vm.closeMenu = closeMenu;\r\n\r\n      function closeMenu() {\r\n\t\t\t\t$mdSidenav('left').close();\r\n\t\t\t};\r\n\r\n      function isOpen(){\r\n\r\n      };\r\n\r\n      function toggleOpen(){\r\n\r\n      };\r\n\r\n    }\r\n\r\n})();\r\n","(function() {\r\n\t'use strict';\r\n\tangular.module('adminApp').controller('topNavController', topNavController);\r\n\r\n    function topNavController($auth, $state, $http, $rootScope, $scope, $mdSidenav) {\r\n      var vm = this;\r\n      vm.logout = function() {\r\n          $auth.logout().then(function() {\r\n              // Remove the authenticated user from local storage\r\n              localStorage.removeItem('user');\r\n              // Flip authenticated to false so that we no longer\r\n              // show UI elements dependant on the user being logged in\r\n              $rootScope.authenticated = false;\r\n              // Remove the current user info from rootscope\r\n              $rootScope.currentUser = null;\r\n              $state.go('login');\r\n          });\r\n      }\r\n\t\t\tvm.openMenu = function() {\r\n\t\t\t\t$mdSidenav('left').open();\r\n\t\t\t};\r\n\t\t\tvm.closeMenu = function() {\r\n\t\t\t\t$mdSidenav('left').close();\r\n\t\t\t};\r\n    }\r\n\r\n})();\r\n","(function() {\r\n\r\n\t'use strict';\r\n\r\n\tangular\r\n\t\t.module('adminApp')\r\n\t\t.controller('UserController', UserController);\r\n\tfunction UserController($http) {\r\n\t\tvar vm = this;\r\n\t\tvm.users;\r\n    $http.get('/api/authenticate').then(function(response) {\r\n\t\t\t//alert(JSON.stringify(response));\r\n      vm.users = response.data.users;\r\n    },function(error){\r\n      console.log(error);\r\n    })\r\n\t}\r\n\r\n})();\r\n"]}